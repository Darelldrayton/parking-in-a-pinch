# Generated by Django 4.2.8 on 2025-06-06 05:51

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("bookings", "0002_remove_booking_payment"),
    ]

    operations = [
        migrations.CreateModel(
            name="WebhookEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_event_id",
                    models.CharField(
                        db_index=True,
                        help_text="Stripe event identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe event ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        help_text="Type of Stripe event",
                        max_length=100,
                        verbose_name="event type",
                    ),
                ),
                (
                    "api_version",
                    models.CharField(
                        help_text="Stripe API version",
                        max_length=20,
                        verbose_name="API version",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Received"),
                            ("processing", "Processing"),
                            ("processed", "Processed"),
                            ("failed", "Failed"),
                            ("ignored", "Ignored"),
                        ],
                        default="received",
                        help_text="Event processing status",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        help_text="Complete event data from Stripe",
                        verbose_name="event data",
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the event was processed",
                        null=True,
                        verbose_name="processed at",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if processing failed",
                        verbose_name="error message",
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of processing attempts",
                        verbose_name="retry count",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Webhook Event",
                "verbose_name_plural": "Webhook Events",
                "db_table": "webhook_events",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["stripe_event_id"],
                        name="webhook_eve_stripe__3e5478_idx",
                    ),
                    models.Index(
                        fields=["event_type", "status"],
                        name="webhook_eve_event_t_15f970_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="webhook_eve_status_e5466e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_payment_method_id",
                    models.CharField(
                        help_text="Stripe payment method identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe payment method ID",
                    ),
                ),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("card", "Credit/Debit Card"),
                            ("bank_account", "Bank Account"),
                            ("digital_wallet", "Digital Wallet"),
                        ],
                        default="card",
                        help_text="Type of payment method",
                        max_length=20,
                        verbose_name="payment type",
                    ),
                ),
                (
                    "card_brand",
                    models.CharField(
                        blank=True,
                        help_text="Card brand (e.g., visa, mastercard)",
                        max_length=20,
                        verbose_name="card brand",
                    ),
                ),
                (
                    "card_last4",
                    models.CharField(
                        blank=True,
                        help_text="Last 4 digits of the card",
                        max_length=4,
                        verbose_name="card last 4 digits",
                    ),
                ),
                (
                    "card_exp_month",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Card expiration month",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                        verbose_name="card expiration month",
                    ),
                ),
                (
                    "card_exp_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Card expiration year",
                        null=True,
                        verbose_name="card expiration year",
                    ),
                ),
                (
                    "bank_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the bank",
                        max_length=100,
                        verbose_name="bank name",
                    ),
                ),
                (
                    "account_last4",
                    models.CharField(
                        blank=True,
                        help_text="Last 4 digits of the account",
                        max_length=4,
                        verbose_name="account last 4 digits",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the user's default payment method",
                        verbose_name="is default",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this payment method is active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who owns this payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_methods",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "db_table": "payment_methods",
                "ordering": ["-is_default", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentIntent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(
                        help_text="Stripe payment intent identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe payment intent ID",
                    ),
                ),
                (
                    "client_secret",
                    models.CharField(
                        help_text="Client secret for frontend confirmation",
                        max_length=255,
                        verbose_name="client secret",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Payment amount in USD",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="amount",
                    ),
                ),
                (
                    "platform_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Platform fee amount in USD",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="platform fee",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="Payment currency",
                        max_length=3,
                        verbose_name="currency",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("requires_payment_method", "Requires Payment Method"),
                            ("requires_confirmation", "Requires Confirmation"),
                            ("requires_action", "Requires Action"),
                            ("processing", "Processing"),
                            ("requires_capture", "Requires Capture"),
                            ("canceled", "Canceled"),
                            ("succeeded", "Succeeded"),
                        ],
                        default="requires_payment_method",
                        help_text="Current status of the payment intent",
                        max_length=30,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Payment description",
                        verbose_name="description",
                    ),
                ),
                (
                    "receipt_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email for payment receipt",
                        max_length=254,
                        verbose_name="receipt email",
                    ),
                ),
                (
                    "confirmation_method",
                    models.CharField(
                        default="automatic",
                        help_text="How the payment intent is confirmed",
                        max_length=20,
                        verbose_name="confirmation method",
                    ),
                ),
                (
                    "capture_method",
                    models.CharField(
                        default="automatic",
                        help_text="How the payment is captured",
                        max_length=20,
                        verbose_name="capture method",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "confirmed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payment was confirmed",
                        null=True,
                        verbose_name="confirmed at",
                    ),
                ),
                (
                    "canceled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payment was canceled",
                        null=True,
                        verbose_name="canceled at",
                    ),
                ),
                (
                    "booking",
                    models.OneToOneField(
                        help_text="Associated booking",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_intent",
                        to="bookings.booking",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment method used for this payment",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payment_intents",
                        to="payments.paymentmethod",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User making the payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_intents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Intent",
                "verbose_name_plural": "Payment Intents",
                "db_table": "payment_intents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_id",
                    models.CharField(
                        db_index=True,
                        help_text="Internal payment identifier",
                        max_length=20,
                        unique=True,
                        verbose_name="payment ID",
                    ),
                ),
                (
                    "stripe_charge_id",
                    models.CharField(
                        help_text="Stripe charge identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe charge ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Payment amount in USD",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="amount",
                    ),
                ),
                (
                    "platform_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Platform fee amount in USD",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="platform fee",
                    ),
                ),
                (
                    "host_payout_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount paid out to host in USD",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="host payout amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="Payment currency",
                        max_length=3,
                        verbose_name="currency",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                        ],
                        default="pending",
                        help_text="Current payment status",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "payment_method_type",
                    models.CharField(
                        help_text="Type of payment method used",
                        max_length=50,
                        verbose_name="payment method type",
                    ),
                ),
                (
                    "card_brand",
                    models.CharField(
                        blank=True,
                        help_text="Card brand if payment was made with card",
                        max_length=20,
                        verbose_name="card brand",
                    ),
                ),
                (
                    "card_last4",
                    models.CharField(
                        blank=True,
                        help_text="Last 4 digits of card if used",
                        max_length=4,
                        verbose_name="card last 4 digits",
                    ),
                ),
                (
                    "receipt_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to payment receipt",
                        verbose_name="receipt URL",
                    ),
                ),
                (
                    "receipt_number",
                    models.CharField(
                        blank=True,
                        help_text="Receipt number for tracking",
                        max_length=50,
                        verbose_name="receipt number",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Payment description",
                        verbose_name="description",
                    ),
                ),
                (
                    "failure_code",
                    models.CharField(
                        blank=True,
                        help_text="Error code if payment failed",
                        max_length=50,
                        verbose_name="failure code",
                    ),
                ),
                (
                    "failure_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if payment failed",
                        verbose_name="failure message",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payment was processed",
                        null=True,
                        verbose_name="processed at",
                    ),
                ),
                (
                    "booking",
                    models.OneToOneField(
                        help_text="Associated booking",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment",
                        to="bookings.booking",
                    ),
                ),
                (
                    "payment_intent",
                    models.OneToOneField(
                        help_text="Associated payment intent",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment",
                        to="payments.paymentintent",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made the payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "db_table": "payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Refund",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "refund_id",
                    models.CharField(
                        db_index=True,
                        help_text="Internal refund identifier",
                        max_length=20,
                        unique=True,
                        verbose_name="refund ID",
                    ),
                ),
                (
                    "stripe_refund_id",
                    models.CharField(
                        help_text="Stripe refund identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe refund ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Refund amount in USD",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="refund amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="Refund currency",
                        max_length=3,
                        verbose_name="currency",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        help_text="Current refund status",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("duplicate", "Duplicate Payment"),
                            ("fraudulent", "Fraudulent Payment"),
                            ("requested_by_customer", "Requested by Customer"),
                            ("booking_canceled", "Booking Canceled"),
                            ("host_canceled", "Host Canceled"),
                            ("no_show", "Customer No Show"),
                            ("other", "Other"),
                        ],
                        help_text="Reason for the refund",
                        max_length=30,
                        verbose_name="reason",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional refund details",
                        verbose_name="description",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for admin use",
                        verbose_name="admin notes",
                    ),
                ),
                (
                    "failure_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason if refund failed",
                        verbose_name="failure reason",
                    ),
                ),
                (
                    "requested_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="requested at"
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the refund was processed",
                        null=True,
                        verbose_name="processed at",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "payment",
                    models.ForeignKey(
                        help_text="Original payment being refunded",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to="payments.payment",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin user who processed the refund",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_refunds",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who requested the refund",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Refund",
                "verbose_name_plural": "Refunds",
                "db_table": "refunds",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["payment", "status"], name="refunds_payment_908281_idx"
                    ),
                    models.Index(
                        fields=["user", "status"], name="refunds_user_id_7e4ca0_idx"
                    ),
                    models.Index(
                        fields=["refund_id"], name="refunds_refund__ee280b_idx"
                    ),
                    models.Index(
                        fields=["stripe_refund_id"], name="refunds_stripe__323b59_idx"
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="refunds_status_df4b9c_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Payout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payout_id",
                    models.CharField(
                        db_index=True,
                        help_text="Internal payout identifier",
                        max_length=20,
                        unique=True,
                        verbose_name="payout ID",
                    ),
                ),
                (
                    "stripe_payout_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe payout identifier",
                        max_length=255,
                        verbose_name="Stripe payout ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total payout amount in USD",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="payout amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="Payout currency",
                        max_length=3,
                        verbose_name="currency",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("paid", "Paid"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        help_text="Current payout status",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        help_text="Start of the payout period",
                        verbose_name="period start",
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        help_text="End of the payout period", verbose_name="period end"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Payout description",
                        verbose_name="description",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for admin use",
                        verbose_name="admin notes",
                    ),
                ),
                (
                    "failure_code",
                    models.CharField(
                        blank=True,
                        help_text="Error code if payout failed",
                        max_length=50,
                        verbose_name="failure code",
                    ),
                ),
                (
                    "failure_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if payout failed",
                        verbose_name="failure message",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payout was processed",
                        null=True,
                        verbose_name="processed at",
                    ),
                ),
                (
                    "arrival_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Expected arrival date of funds",
                        null=True,
                        verbose_name="arrival date",
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        help_text="Host receiving the payout",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payouts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "payments",
                    models.ManyToManyField(
                        help_text="Payments included in this payout",
                        related_name="payouts",
                        to="payments.payment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payout",
                "verbose_name_plural": "Payouts",
                "db_table": "payouts",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["host", "status"], name="payouts_host_id_9bc9fb_idx"
                    ),
                    models.Index(
                        fields=["payout_id"], name="payouts_payout__1bf677_idx"
                    ),
                    models.Index(
                        fields=["stripe_payout_id"], name="payouts_stripe__0e5af4_idx"
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="payouts_status_ef59be_idx",
                    ),
                    models.Index(
                        fields=["period_start", "period_end"],
                        name="payouts_period__dad69a_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(
                fields=["user", "is_active"], name="payment_met_user_id_a6fdd9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(
                fields=["stripe_payment_method_id"],
                name="payment_met_stripe__52abfb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(
                fields=["user", "is_default"], name="payment_met_user_id_332e3a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentintent",
            index=models.Index(
                fields=["user", "status"], name="payment_int_user_id_f69c6d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentintent",
            index=models.Index(
                fields=["booking"], name="payment_int_booking_003deb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentintent",
            index=models.Index(
                fields=["stripe_payment_intent_id"],
                name="payment_int_stripe__443f7f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentintent",
            index=models.Index(
                fields=["status", "created_at"], name="payment_int_status_1c0031_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["user", "status"], name="payments_user_id_1b771c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["booking"], name="payments_booking_4c4815_idx"),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_id"], name="payments_payment_2d1dd8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["stripe_charge_id"], name="payments_stripe__3041dd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["status", "created_at"], name="payments_status_426d4f_idx"
            ),
        ),
    ]
