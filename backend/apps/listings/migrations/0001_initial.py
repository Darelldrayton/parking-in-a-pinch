# Generated by Django 4.2.8 on 2025-06-05 18:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ParkingListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the parking listing', max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the parking space', verbose_name='description')),
                ('address', models.TextField(help_text='Full address of the parking space', verbose_name='address')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Latitude coordinate', max_digits=10, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude coordinate', max_digits=11, null=True, verbose_name='longitude')),
                ('borough', models.CharField(choices=[('Manhattan', 'Manhattan'), ('Brooklyn', 'Brooklyn'), ('Queens', 'Queens'), ('Bronx', 'Bronx'), ('Staten Island', 'Staten Island')], help_text='NYC borough where the parking space is located', max_length=20, verbose_name='borough')),
                ('space_type', models.CharField(choices=[('driveway', 'Driveway'), ('garage', 'Garage'), ('lot', 'Parking Lot'), ('street', 'Street Parking')], help_text='Type of parking space', max_length=20, verbose_name='space type')),
                ('max_vehicle_size', models.CharField(blank=True, help_text='Maximum vehicle size that can fit', max_length=50, verbose_name='max vehicle size')),
                ('hourly_rate', models.DecimalField(decimal_places=2, help_text='Hourly parking rate in USD', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='hourly rate')),
                ('daily_rate', models.DecimalField(decimal_places=2, help_text='Daily parking rate in USD', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='daily rate')),
                ('weekly_rate', models.DecimalField(decimal_places=2, help_text='Weekly parking rate in USD', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='weekly rate')),
                ('is_covered', models.BooleanField(default=False, help_text='Whether the parking space is covered', verbose_name='is covered')),
                ('has_ev_charging', models.BooleanField(default=False, help_text='Whether EV charging is available', verbose_name='has EV charging')),
                ('has_security', models.BooleanField(default=False, help_text='Whether the area has security cameras or guards', verbose_name='has security')),
                ('instructions', models.TextField(blank=True, help_text='Special instructions for guests', verbose_name='instructions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the listing is active and available for booking', verbose_name='is active')),
                ('rating_average', models.DecimalField(decimal_places=2, default=0, help_text='Average rating from reviews', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='average rating')),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text='Total number of reviews', verbose_name='total reviews')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('host', models.ForeignKey(help_text='Host who owns this parking space', on_delete=django.db.models.deletion.CASCADE, related_name='parking_listings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Parking Listing',
                'verbose_name_plural': 'Parking Listings',
                'db_table': 'parking_listings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Listing image file', upload_to='listings/', verbose_name='image')),
                ('alt_text', models.CharField(blank=True, help_text='Alt text for accessibility', max_length=200, verbose_name='alt text')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which to display the image', verbose_name='display order')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('listing', models.ForeignKey(help_text='Parking listing this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='listings.parkinglisting')),
            ],
            options={
                'verbose_name': 'Listing Image',
                'verbose_name_plural': 'Listing Images',
                'db_table': 'listing_images',
                'ordering': ['display_order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(help_text='Start of unavailable period', verbose_name='start datetime')),
                ('end_datetime', models.DateTimeField(help_text='End of unavailable period', verbose_name='end datetime')),
                ('reason', models.CharField(blank=True, help_text='Reason for unavailability', max_length=100, verbose_name='reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('listing', models.ForeignKey(help_text='Parking listing', on_delete=django.db.models.deletion.CASCADE, related_name='unavailable_periods', to='listings.parkinglisting')),
            ],
            options={
                'verbose_name': 'Listing Availability',
                'verbose_name_plural': 'Listing Availabilities',
                'db_table': 'listing_availability',
                'ordering': ['start_datetime'],
            },
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['host'], name='parking_lis_host_id_7d210c_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['borough'], name='parking_lis_borough_00551b_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['space_type'], name='parking_lis_space_t_7c1b0b_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['hourly_rate'], name='parking_lis_hourly__3213a0_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['daily_rate'], name='parking_lis_daily_r_3650bf_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['is_active'], name='parking_lis_is_acti_c37b93_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['created_at'], name='parking_lis_created_790cdb_idx'),
        ),
        migrations.AddIndex(
            model_name='parkinglisting',
            index=models.Index(fields=['rating_average'], name='parking_lis_rating__a67942_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='listingimage',
            unique_together={('listing', 'display_order')},
        ),
        migrations.AddIndex(
            model_name='listingavailability',
            index=models.Index(fields=['listing', 'start_datetime'], name='listing_ava_listing_7b96c7_idx'),
        ),
        migrations.AddIndex(
            model_name='listingavailability',
            index=models.Index(fields=['listing', 'end_datetime'], name='listing_ava_listing_4ee698_idx'),
        ),
    ]
