# Generated by Django 4.2.8 on 2025-06-06 06:22

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("bookings", "0002_remove_booking_payment"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "review_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for this review",
                        max_length=20,
                        unique=True,
                        verbose_name="review ID",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="ID of the object being reviewed"
                    ),
                ),
                (
                    "review_type",
                    models.CharField(
                        choices=[
                            ("listing", "Listing Review"),
                            ("renter", "Renter Review"),
                            ("host", "Host Review"),
                        ],
                        help_text="Type of review",
                        max_length=20,
                        verbose_name="review type",
                    ),
                ),
                (
                    "overall_rating",
                    models.IntegerField(
                        help_text="Overall rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="overall rating",
                    ),
                ),
                (
                    "cleanliness_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for cleanliness (listings only)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="cleanliness rating",
                    ),
                ),
                (
                    "location_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for location convenience",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="location rating",
                    ),
                ),
                (
                    "value_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for value for money",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="value rating",
                    ),
                ),
                (
                    "communication_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for communication (hosts/renters)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="communication rating",
                    ),
                ),
                (
                    "security_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for security of the location",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="security rating",
                    ),
                ),
                (
                    "reliability_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for reliability (renters only)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="reliability rating",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional title for the review",
                        max_length=200,
                        verbose_name="review title",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Detailed review comment",
                        max_length=2000,
                        verbose_name="review comment",
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this review should be displayed anonymously",
                        verbose_name="is anonymous",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Moderation"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("flagged", "Flagged for Review"),
                            ("hidden", "Hidden"),
                        ],
                        default="pending",
                        help_text="Moderation status of this review",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this review is from a verified booking",
                        verbose_name="is verified",
                    ),
                ),
                (
                    "helpful_votes",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of helpful votes this review received",
                        verbose_name="helpful votes",
                    ),
                ),
                (
                    "unhelpful_votes",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of unhelpful votes this review received",
                        verbose_name="unhelpful votes",
                    ),
                ),
                (
                    "flagged_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this review has been flagged",
                        verbose_name="flagged count",
                    ),
                ),
                (
                    "moderation_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for moderation",
                        verbose_name="moderation notes",
                    ),
                ),
                (
                    "response_text",
                    models.TextField(
                        blank=True,
                        help_text="Response from the person being reviewed",
                        max_length=1000,
                        verbose_name="response text",
                    ),
                ),
                (
                    "response_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when response was added",
                        null=True,
                        verbose_name="response date",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this review was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this review was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this review was published",
                        null=True,
                        verbose_name="published at",
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        help_text="Booking this review is associated with",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="bookings.booking",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="Type of object being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "moderated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Moderator who reviewed this content",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderated_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="User who wrote this review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Review",
                "verbose_name_plural": "Reviews",
                "db_table": "reviews",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReviewTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this template",
                        max_length=100,
                        verbose_name="template name",
                    ),
                ),
                (
                    "review_type",
                    models.CharField(
                        choices=[
                            ("listing", "Listing Review"),
                            ("renter", "Renter Review"),
                            ("host", "Host Review"),
                        ],
                        help_text="Type of review this template is for",
                        max_length=20,
                        verbose_name="review type",
                    ),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("positive", "Positive"),
                            ("neutral", "Neutral"),
                            ("negative", "Negative"),
                        ],
                        help_text="Sentiment of this template",
                        max_length=10,
                        verbose_name="template type",
                    ),
                ),
                (
                    "title_template",
                    models.CharField(
                        blank=True,
                        help_text="Template for review title",
                        max_length=200,
                        verbose_name="title template",
                    ),
                ),
                (
                    "comment_template",
                    models.TextField(
                        help_text="Template for review comment",
                        max_length=1000,
                        verbose_name="comment template",
                    ),
                ),
                (
                    "suggested_rating",
                    models.IntegerField(
                        help_text="Suggested overall rating for this template",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="suggested rating",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this template is available for use",
                        verbose_name="is active",
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this template has been used",
                        verbose_name="usage count",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this template was created",
                        verbose_name="created at",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review Template",
                "verbose_name_plural": "Review Templates",
                "db_table": "review_templates",
                "ordering": ["review_type", "template_type", "name"],
                "indexes": [
                    models.Index(
                        fields=["review_type"], name="review_temp_review__1c70ce_idx"
                    ),
                    models.Index(
                        fields=["template_type"], name="review_temp_templat_2d0855_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="review_temp_is_acti_d13836_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ReviewVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vote_type",
                    models.CharField(
                        choices=[("helpful", "Helpful"), ("unhelpful", "Unhelpful")],
                        help_text="Type of vote cast",
                        max_length=10,
                        verbose_name="vote type",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this vote was cast",
                        verbose_name="created at",
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        help_text="Review being voted on",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="reviews.review",
                    ),
                ),
                (
                    "voter",
                    models.ForeignKey(
                        help_text="User who cast this vote",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Review Vote",
                "verbose_name_plural": "Review Votes",
                "db_table": "review_votes",
                "indexes": [
                    models.Index(
                        fields=["review", "vote_type"],
                        name="review_vote_review__91af9f_idx",
                    ),
                    models.Index(
                        fields=["voter"], name="review_vote_voter_i_d68991_idx"
                    ),
                ],
                "unique_together": {("review", "voter")},
            },
        ),
        migrations.CreateModel(
            name="ReviewImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Review image file",
                        upload_to="reviews/",
                        verbose_name="image",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alt text for accessibility",
                        max_length=200,
                        verbose_name="alt text",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which to display the image",
                        verbose_name="display order",
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this image has been approved by moderation",
                        verbose_name="is approved",
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this image was uploaded",
                        verbose_name="uploaded at",
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        help_text="Review this image belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="reviews.review",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review Image",
                "verbose_name_plural": "Review Images",
                "db_table": "review_images",
                "ordering": ["display_order", "uploaded_at"],
                "indexes": [
                    models.Index(
                        fields=["review"], name="review_imag_review__2b644f_idx"
                    ),
                    models.Index(
                        fields=["is_approved"], name="review_imag_is_appr_53dfcf_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ReviewFlag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("spam", "Spam"),
                            ("inappropriate", "Inappropriate Content"),
                            ("fake", "Fake Review"),
                            ("harassment", "Harassment"),
                            ("off_topic", "Off Topic"),
                            ("personal_info", "Contains Personal Information"),
                            ("other", "Other"),
                        ],
                        help_text="Reason for flagging",
                        max_length=20,
                        verbose_name="reason",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about the flag",
                        max_length=500,
                        verbose_name="description",
                    ),
                ),
                (
                    "is_resolved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this flag has been resolved",
                        verbose_name="is resolved",
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about how this flag was resolved",
                        verbose_name="resolution notes",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this flag was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this flag was resolved",
                        null=True,
                        verbose_name="resolved at",
                    ),
                ),
                (
                    "flagger",
                    models.ForeignKey(
                        help_text="User who flagged this review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_flags",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Moderator who resolved this flag",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_flags",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        help_text="Review being flagged",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flags",
                        to="reviews.review",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review Flag",
                "verbose_name_plural": "Review Flags",
                "db_table": "review_flags",
                "indexes": [
                    models.Index(
                        fields=["review"], name="review_flag_review__3c5b3c_idx"
                    ),
                    models.Index(
                        fields=["flagger"], name="review_flag_flagger_9b7c6c_idx"
                    ),
                    models.Index(
                        fields=["reason"], name="review_flag_reason_eab492_idx"
                    ),
                    models.Index(
                        fields=["is_resolved"], name="review_flag_is_reso_a01404_idx"
                    ),
                ],
                "unique_together": {("review", "flagger")},
            },
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["reviewer"], name="reviews_reviewe_965d53_idx"),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["content_type", "object_id"], name="reviews_content_be5f25_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["review_type"], name="reviews_review__77e7cb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["booking"], name="reviews_booking_012755_idx"),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["overall_rating"], name="reviews_overall_fa1e40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["status"], name="reviews_status_12ddaa_idx"),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["created_at"], name="reviews_created_53b5d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["is_verified"], name="reviews_is_veri_aa479e_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="review",
            constraint=models.UniqueConstraint(
                fields=("reviewer", "booking", "review_type"),
                name="unique_review_per_booking_type",
            ),
        ),
    ]
